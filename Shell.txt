#1) Write a menu driven shell script for the following options:(i) Merging the contents of two files into another. (ii) Searching a pattern from a file. If the user gives some invalid choice, it will prompt "Invalid option" message.

read -p "Enter 1 for merging or 2 for pattern : " choice
case $choice in 
	1) cat file1.sh file2.sh > file3.sh
	;;
	2) grep "what" file1.sh
	;;
	*) echo "Invalid option"
esac 

#2) Write a shell script to check whether a given string is palindrome or not.

read -p "Enter string : " str
rev=""
len=${#str}
for (( i = $len-1; i>=0 ; i-- ))
do
	rev+=${str:i:1}
done
if [ $str == $rev ]
then
	echo It is a palindrome
else
	echo It is not a palindrome
fi

#3) Write a shell script that will display some desired number of lines starting from a specified line of a given file. User must interactively supply the file name, starting line number and number of lines to be displayed.

read -p "Enter file name : " file
read -p "Enter starting line : " start
read -p "Enter the number of lines to be displayed : " num
tail -n +$start $file | head -n $num

#4) Write a menu driven shell script for the following options: i) Number of presently active users ii) Displaying some desired number of lines from top of a file. iii) Updating the access time of a given file to current time. iv) If the user gives some invalid choice it will prompt "Invalid option" message.

read -p "Enter 1 for number of presently active users, 2 for displaying lines from top or 3 for updating access time of a file : " choice
case $choice in 
	1) who
	;;
	2) read -p "Enter file name : " file
	   read -p "Enter number of lines to be displayed : " num
	   head -n $num $file
	;;
	3) read -p "Enter file name : " file
	   touch -a $file
           stat $file
	;;
	*) echo "Invalid option"
esac 

#5) Write a shell script to sort some given numbers in descending order.

echo "Enter the numbers : "
read -a arr
n=${#arr[@]}
echo "The original array : ${arr[@]}"
for (( i=0; i<n-1; i++ ))
	do
	for (( j=0; j<$n-i-1; j++ ))
		do
		if [  ${arr[$j]} -lt ${arr[$((j+1))]} ]
			then
			temp=${arr[$j]}
			arr[$j]=${arr[$((j+1))]}
			arr[$((j+1))]=$temp
		fi
		done
	done
echo "Descending order : ${arr[@]}"

#6) Write a shell script to find the maximum and minimum of some given numbers.

echo "Enter the numbers : "
read -a arr
n=${#arr[@]}
echo "The original array : ${arr[@]}"
maxi=${arr[0]}
mini=${arr[0]}
for (( i=1; i<n; i++ ))
do
	if [ $maxi -lt ${arr[$i]} ]
	then
		maxi=${arr[$i]}
	fi
	if [ $mini -gt ${arr[$i]} ]
	then
		mini=${arr[$i]}
	fi
done
echo "The maximum number : $maxi"
echo "The minimum number : $mini"

#7) Write a shell script to create two infinite processes in background and then prematurely terminate each of these infinite processes.

proc () 
{
	while :
	do
		echo $1
		sleep 1
	done
}

proc p1 &
proc1_id=$!

proc p2 &
proc2_id=$!

sleep 3
echo $proc1_id $proc2_id
kill $proc2_id
kill $proc1_id

#8) Write a shell script to implement Bubble Sort. Print the contents of the sorted array without using any loop.

echo "Enter the numbers : "
read -a arr
n=${#arr[@]}
echo "The original array : ${arr[@]}"
for (( i=0; i<n-1; i++ ))
	do
	for (( j=0; j<$n-i-1; j++ ))
		do
		if [  ${arr[$j]} -gt ${arr[$((j+1))]} ]
			then
			temp=${arr[$j]}
			arr[$j]=${arr[$((j+1))]}
			arr[$((j+1))]=$temp
		fi
		done
	done
echo "The sorted array : ${arr[@]}"

#9) Write a shell script to delete an element from a specific position of an array

echo "Enter the numbers : "
read -a arr
echo "The original array : ${arr[@]}"
read -p "Enter the index number to be deleted : " index
unset arr[$index]
echo "The array : ${arr[@]}"

#10) Create a file that contains the ROLL NUMBER, NAME, CITY of students of a class in sorted order with respect to Roll Number. Now write a menu driven shell script that has the following options: a) Display the contents of whole file. b) Display the information of a student with specific Roll Number supplied by the User. c) Delete the entry of a student from the file with a specific Roll Number supplied by User. d) Add a new entry in the file. e) Update an entry of a student with a specific Roll Number supplied by the User.

filename="example.txt"

display_file() 
{
    echo "Student Information:"
    sort -k1,1n "$filename" #resistricts sorting till 1st column of fields only
}

display_student() 
{
    echo "Enter roll number :"
    read roll_no
    grep -w "$roll_no" "$filename"
}

delete_student() 
{
    echo "Enter roll number :"
    read roll_no
    sed -i "/^$roll_no /d" "$filename"
}

add_student() 
{
    echo "Enter roll number, name and city :"
    read roll_no name city
    echo "$roll_no $name $city" >> "$filename"
}

update_student() 
{
    echo "Enter roll number, name and city :"
    read roll_no name city
    sed -i "/^$roll_no /s/[^ ]* [^ ]* [^ ]*/$roll_no $name $city/" "$filename"
}

while true; 
do
    echo -e "Enter :\n1. Display entire contents of the file\n2. Display student info by roll number\n3. Delete student entry by roll number\n4. Add a new student entry\n5. Update student entry\n6. Exit"
    read choice

    case $choice in
        1) display_file ;;
        2) display_student ;;
        3) delete_student ;;
        4) add_student ;;
        5) update_student ;;
        6) break ;;
        *) echo "Invalid choice." ;;
    esac
done

#11) Write a shell script to check for an Armstrong number.

read -p "Enter the number : " num
len=${#num}
n=$num
while [ $n -gt 0 ]
do
	d=$((n % 10))
        sum=$((sum + d**len))
        n=$((n/10))
done
if [ $sum -eq $num ]
then
	echo "It is an Armstrong number"
else
	echo "It is not an Armstrong number"
fi

#12) Write a shell script to print all possible combinations of 3 numbers.

echo "Enter the three numbers : "
read -a arr
echo "All possible combinations : "
for i in ${arr[0]} ${arr[1]} ${arr[2]}
do	
	for j in ${arr[0]} ${arr[1]} ${arr[2]}
	do
		for k in ${arr[0]} ${arr[1]} ${arr[2]}
		do
			echo $i $j $k
		done
	done
done

#13) Write a shell program to find the position of substring in given string.

read -p "Enter string : " str
read -p "Enter substring : " sub
rest=${str#*$sub}
echo $(( ${#str}-${#rest}- ${#sub} ))

#14) Write a shell program to find the ged for the 2 given numbers.

echo "Enter the two numbers : "
read num1 num2
for (( i=1; i<=num1 && i<=num2; i++ ))
do
	if [ $((num1%i)) -eq 0 ] && [ $((num2%i)) -eq 0 ]
	then
		gcd=$i
	fi
done
echo "The gcd of $num1 and $num2 is $gcd"

#15) Write a shell program to count number of words, characters, white spaces and special symbols in a given text


echo "Enter a string : "
read text

word=$(echo -n "$text" | wc -w)
char=$(echo -n "$text" | wc -c)

space=$(expr length "$text" - length `echo "$text" | sed "s/ //g"`)
special=$(expr length "${text//[^\~!@#$&*()]/}")

echo "Number of words = $word"
echo "Number of characters = $char"
echo "Number of white spaces = $space"
echo "Number of special symbols = $special"

#16) Write a shell program to find factorial of given number.

read -p "Enter the number : " n
fact=1
for (( i=1 ; i<=n; i++ ))
do
	fact=$((fact*i))
done
echo "The factorial of $n is $fact"

#17) Write shell script to generate fibonacci series upto'n'.

read -p "Enter the value of n : " n
a=0
b=1
echo "The fibonacci series : "
for (( i=0 ; i<n; i++ ))
do
	echo "$a"
	c=$((a+b))
	a=$b
	b=$c
done

#18) Write a shell script to sort the given numbers in descending order using Bubble sort.

echo "Enter the numbers : "
read -a arr
n=${#arr[@]}
echo "The original array : ${arr[@]}"
for (( i=0; i<n-1; i++ ))
	do
	for (( j=0; j<$n-i-1; j++ ))
		do
		if [  ${arr[$j]} -lt ${arr[$((j+1))]} ]
			then
			temp=${arr[$j]}
			arr[$j]=${arr[$((j+1))]}
			arr[$((j+1))]=$temp
		fi
		done
	done
echo "Descending order : ${arr[@]}"
